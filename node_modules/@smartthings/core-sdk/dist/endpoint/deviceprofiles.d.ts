import { Endpoint } from '../endpoint';
import { EndpointClientConfig } from '../endpoint-client';
import { Owner, Status } from '../types';
import { CapabilityReference } from './devices';
export interface DeviceComponentRequest {
    id?: string;
    capabilities?: CapabilityReference[];
    categories?: string[];
}
export interface DeviceComponent extends DeviceComponentRequest {
    /**
     * UTF-8 label for the component. This value is generated and dependent on the locale of the request
     */
    label?: string;
}
export declare enum DeviceProfileStatus {
    DEVELOPMENT = "DEVELOPMENT",
    PUBLISHED = "PUBLISHED"
}
export interface DeviceProfileRequest {
    name?: string;
    components?: DeviceComponentRequest[];
    metadata?: {
        [key: string]: string;
    };
}
export interface DeviceProfileUpdateRequest {
    components?: DeviceComponentRequest[];
    metadata?: {
        [key: string]: string;
    };
}
export interface DeviceProfile extends DeviceProfileRequest {
    id: string;
    name: string;
    owner: Owner;
    components: DeviceComponent[];
    metadata?: {
        [key: string]: string;
    };
    status: DeviceProfileStatus;
}
export declare class DeviceProfilesEndpoint extends Endpoint {
    constructor(config: EndpointClientConfig);
    /**
     * List all the device profiles belonging to the principal (i.e. user)
     */
    list(): Promise<DeviceProfile[]>;
    /**
     * Get the definition of a specific device profile
     * @param id UUID of the device profile
     */
    get(id: string): Promise<DeviceProfile>;
    /**
     * Delete a device profile
     * @param id UUID of the device profile
     */
    delete(id: string): Promise<Status>;
    /**
     * Create a device profile
     * @param data device profile definition
     */
    create(data: DeviceProfileRequest): Promise<DeviceProfile>;
    /**
     * Update a device profile
     * @param id UUID of the device profile
     * @param data the new device profile definition
     */
    update(id: string, data: DeviceProfileUpdateRequest): Promise<DeviceProfile>;
    /**
     * Update the status of a device profile
     * @param id UUID of the device profile
     * @param deviceProfileStatus new device profile status
     */
    updateStatus(id: string, deviceProfileStatus: DeviceProfileStatus): Promise<DeviceProfile>;
}
//# sourceMappingURL=deviceprofiles.d.ts.map