import { AxiosResponse } from 'axios';
import { Authenticator } from './authenticator';
import { Logger } from './logger';
export interface HttpClientHeaders {
    [name: string]: string;
}
export declare type HttpClientParamValue = string | string[] | number;
export interface HttpClientParams {
    [name: string]: HttpClientParamValue;
}
export declare type HttpClientMethod = 'get' | 'GET' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'delete' | 'DELETE';
export interface SmartThingsURLProvider {
    baseURL: string;
    authURL: string;
    keyApiURL: string;
}
export declare const defaultSmartThingsURLProvider: SmartThingsURLProvider;
export interface EndpointClientConfig {
    authenticator: Authenticator;
    urlProvider?: SmartThingsURLProvider;
    logger?: Logger;
    loggingId?: string;
    version?: string;
    headers?: HttpClientHeaders;
    locationId?: string;
    installedAppId?: string;
}
export interface ItemsList {
    items: [];
    _links?: {
        next?: {
            href: string;
        };
        previous?: {
            href: string;
        };
    };
}
export default class EndpointClient {
    readonly basePath: string;
    readonly config: EndpointClientConfig;
    private logger;
    constructor(basePath: string, config: EndpointClientConfig);
    setHeader(name: string, value: string): EndpointClient;
    removeHeader(name: string): EndpointClient;
    private url;
    request<T = any, R = AxiosResponse<T>>(method: HttpClientMethod, path?: string, data?: any, params?: HttpClientParams): Promise<T>;
    get<T = any, R = AxiosResponse<T>>(path?: string, params?: HttpClientParams): Promise<T>;
    post<T = any, R = AxiosResponse<T>>(path?: string, data?: any, params?: HttpClientParams): Promise<T>;
    put<T = any, R = AxiosResponse<T>>(path?: string, data?: any, params?: HttpClientParams): Promise<T>;
    patch<T = any, R = AxiosResponse<T>>(path?: string, data?: any, params?: HttpClientParams): Promise<T>;
    delete<T = any, R = AxiosResponse<T>>(path?: string, params?: HttpClientParams): Promise<T>;
    getPagedItems<T = any, R = AxiosResponse<T>>(path?: string, params?: HttpClientParams): Promise<T[]>;
}
//# sourceMappingURL=endpoint-client.d.ts.map